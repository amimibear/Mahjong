#include <iostream>
#include <ctime>
#include <string>
#include <cstring>
#include <sstream>
#include <fstream>
#include <vector>
#include <set>
#include <cmath>
#include <cstdlib>
#include <unordered_map>
#include <algorithm>
#include <boost/algorithm/string.hpp>
#include "jsoncpp/json.h"
#include "MahjongGB/MahjongGB.h"
//#define _BOTZONE_ONLINE

using namespace std;
Json::Value inputJSON;
Json::Value outputJSON;
string action_type,action_content;
vector<string> request, response;
typedef uint8_t tile;
short num[203122][6][5];//+a-b几个可行的
int add[203122][6][5];//开始的地址
short biao[46148517];
int getx[2869]={0,50331648,6291456,19136512,786432,2392064,98304,299008,12288,37376,1536,4672,192,584,24,73,3,56623104,69468160,25427968,38273024,51118080,7077888,19922944,52723712,8683520,21528576,3178496,4784128,50429952,6389760,19234816,884736,2490368,50630656,6590464,19435520,1085440,2691072,397312,598016,50343936,6303744,19148800,798720,2404352,110592,311296,50369024,6328832,19173888,823808,2429440,135680,336384,49664,74752,50333184,6292992,19138048,787968,2393600,99840,300544,13824,38912,50336320,6296128,19141184,791104,2396736,102976,303680,16960,42048,6208,9344,50331840,6291648,19136704,786624,2392256,98496,299200,12480,37568,1728,4864,50332232,6292040,19137096,787016,2392648,98888,299592,12872,37960,2120,5256,776,1168,50331672,6291480,19136536,786456,2392088,98328,299032,12312,37400,1560,4696,216,608,50331721,6291529,19136585,786505,2392137,98377,299081,12361,37449,1609,4745,265,657,97,146,50331651,6291459,19136515,786435,2392067,98307,299011,12291,37379,1539,4675,195,587,27,76,75759616,57409536,70254592,26214400,59015168,71860224,40665088,53510144,9469952,55115776,23920640,56721408,69566464,25526272,38371328,51216384,7176192,20021248,52822016,8781824,21626880,3276800,56922112,69767168,25726976,38572032,51417088,7376896,53022720,8982528,21827584,5083136,50728960,6688768,19533824,1183744,50929664,6889472,19734528,2990080,56635392,69480448,25440256,38285312,51130368,7090176,19935232,52736000,8695808,21540864,3190784,4796416,50442240,6402048,19247104,897024,2502656,50642944,6602752,19447808,1097728,2703360,409600,56660480,69505536,25465344,38310400,51155456,7115264,19960320,52761088,8720896,21565952,3215872,4821504,50467328,6427136,19272192,922112,50668032,6627840,19472896,1122816,2728448,635392,50381312,6341120,19186176,836096,2441728,147968,50406400,6366208,19211264,861184,2466816,373760,56624640,69469696,25429504,38274560,51119616,7079424,19924480,52725248,8685056,21530112,3180032,4785664,50431488,6391296,19236352,886272,2491904,50632192,6592000,19437056,1086976,2692608,398848,599552,50345472,6305280,19150336,800256,2405888,112128,312832,50370560,6330368,19175424,825344,2430976,137216,337920,51200,56627776,69472832,25432640,38277696,51122752,7082560,19927616,52728384,8688192,21533248,3183168,4788800,50434624,6394432,19239488,889408,2495040,50635328,6595136,19440192,1090112,2695744,401984,602688,50348608,6308416,19153472,803392,2409024,115264,50373696,6333504,19178560,828480,2434112,140352,341056,79424,50337856,6297664,19142720,792640,2398272,104512,305216,18496,50340992,6300800,19145856,795776,2401408,107648,308352,46720,56623296,69468352,25428160,38273216,51118272,7078080,19923136,52723904,8683712,21528768,3178688,4784320,50430144,6389952,19235008,884928,2490560,50630848,6590656,19435712,1085632,2691264,397504,598208,50344128,6303936,19148992,798912,2404544,110784,311488,50369216,6329024,19174080,824000,2429632,135872,336576,49856,74944,50333376,6293184,19138240,788160,2393792,100032,300736,14016,39104,50336512,6296320,19141376,791296,2396928,103168,303872,17152,42240,6400,56623688,69468744,25428552,38273608,51118664,7078472,19923528,52724296,8684104,21529160,3179080,4784712,50430536,6390344,19235400,885320,2490952,50631240,6591048,19436104,1086024,2691656,397896,598600,50344520,6304328,19149384,799304,2404936,111176,311880,50369608,6329416,19174472,824392,2430024,136264,336968,50248,75336,50333768,6293576,19138632,788552,2394184,100424,301128,14408,50336904,6296712,19141768,791688,2397320,103560,304264,17544,42632,9928,50332424,6292232,19137288,787208,2392840,99080,299784,13064,38152,2312,50332816,6292624,19137680,787600,2393232,99472,300176,13456,38544,5840,56623128,69468184,25427992,38273048,51118104,7077912,19922968,52723736,8683544,21528600,3178520,4784152,50429976,6389784,19234840,884760,2490392,50630680,6590488,19435544,1085464,2691096,397336,598040,50343960,6303768,19148824,798744,2404376,110616,311320,50369048,6328856,19173912,823832,2429464,135704,336408,49688,74776,50333208,6293016,19138072,787992,2393624,99864,300568,13848,38936,50336344,6296152,19141208,791128,2396760,103000,303704,16984,42072,6232,9368,50331864,6291672,19136728,786648,2392280,98520,299224,12504,37592,1752,4888,50332256,6292064,19137120,787040,2392672,98912,299616,12896,37984,2144,5280,800,56623177,69468233,25428041,38273097,51118153,7077961,19923017,52723785,8683593,21528649,3178569,4784201,50430025,6389833,19234889,884809,2490441,50630729,6590537,19435593,1085513,2691145,397385,598089,50344009,6303817,19148873,798793,2404425,110665,311369,50369097,6328905,19173961,823881,2429513,135753,336457,49737,74825,50333257,6293065,19138121,788041,2393673,99913,300617,13897,38985,50336393,6296201,19141257,791177,2396809,103049,303753,17033,42121,6281,9417,50331913,6291721,19136777,786697,2392329,98569,299273,12553,37641,1801,50332305,6292113,19137169,787089,2392721,98961,299665,12945,38033,2193,5329,1241,50331745,6291553,19136609,786529,2392161,98401,299105,12385,37473,1633,4769,289,50331794,6291602,19136658,786578,2392210,98450,299154,12434,37522,1682,4818,730,56623107,69468163,25427971,38273027,51118083,7077891,19922947,52723715,8683523,21528579,3178499,4784131,50429955,6389763,19234819,884739,2490371,50630659,6590467,19435523,1085443,2691075,397315,598019,50343939,6303747,19148803,798723,2404355,110595,311299,50369027,6328835,19173891,823811,2429443,135683,336387,49667,74755,50333187,6292995,19138051,787971,2393603,99843,300547,13827,38915,50336323,6296131,19141187,791107,2396739,102979,303683,16963,42051,6211,9347,50331843,6291651,19136707,786627,2392259,98499,299203,12483,37571,1731,4867,50332235,6292043,19137099,787019,2392651,98891,299595,12875,37963,2123,5259,779,1171,50331675,6291483,19136539,786459,2392091,98331,299035,12315,37403,1563,4699,219,611,50331724,6291532,19136588,786508,2392140,98380,299084,12364,37452,1612,4748,268,660,100,76546048,59801600,74252288,43057152,75857920,57507840,70352896,26312704,59113472,71958528,40763392,53608448,9568256,76058624,57708544,59314176,72159232,40964096,55414784,24219648,57020416,69865472,25825280,38670336,51515392,7475200,57221120,70066176,26025984,38871040,53321728,9281536,22126592,5382144,75771904,57421824,70266880,26226688,59027456,71872512,40677376,53522432,9482240,55128064,23932928,56733696,69578752,25538560,38383616,51228672,7188480,20033536,52834304,8794112,21639168,3289088,56934400,69779456,25739264,38584320,51429376,7389184,53035008,8994816,21839872,5095424,50741248,6701056,19546112,1196032,75796992,57446912,70291968,26251776,59052544,71897600,40702464,53547520,9507328,55153152,23958016,56758784,69603840,25563648,38408704,51253760,7213568,20058624,56959488,69804544,25764352,38609408,51454464,7414272,53060096,9019904,21864960,5120512,50967040,6926848,19771904,3027456,56672768,69517824,25477632,38322688,51167744,7127552,19972608,52773376,8733184,21578240,3228160,4833792,50479616,6439424,19284480,934400,56697856,69542912,25502720,38347776,51192832,7152640,19997696,52798464,8758272,21603328,3253248,4858880,50705408,6665216,19510272,1160192,2765824,672768,75761152,57411072,70256128,26215936,59016704,71861760,40666624,53511680,9471488,55117312,23922176,56722944,69568000,25527808,38372864,51217920,7177728,20022784,52823552,8783360,21628416,3278336,56923648,69768704,25728512,38573568,51418624,7378432,53024256,8984064,21829120,5084672,50730496,6690304,19535360,1185280,50931200,6891008,19736064,2991616,56636928,69481984,25441792,38286848,51131904,7091712,19936768,52737536,8697344,21542400,3192320,4797952,50443776,6403584,19248640,898560,2504192,50644480,6604288,19449344,1099264,2704896,411136,56662016,69507072,25466880,38311936,51156992,7116800,19961856,52762624,8722432,21567488,3217408,4823040,50468864,6428672,19273728,923648,50669568,6629376,19474432,1124352,2729984,636928,50382848,6342656,19187712,837632,2443264,149504,75764288,57414208,70259264,26219072,59019840,71864896,40669760,53514816,9474624,55120448,23925312,56726080,69571136,25530944,38376000,51221056,7180864,20025920,52826688,8786496,21631552,3281472,56926784,69771840,25731648,38576704,51421760,7381568,53027392,8987200,21832256,5087808,50733632,6693440,19538496,1188416,50934336,6894144,19739200,2994752,56640064,69485120,25444928,38289984,51135040,7094848,19939904,52740672,8700480,21545536,3195456,4801088,50446912,6406720,19251776,901696,2507328,56665152,69510208,25470016,38315072,51160128,7119936,19964992,52765760,8725568,21570624,3220544,4826176,50472000,6431808,19276864,926784,50672704,6632512,19477568,1127488,2733120,640064,50411072,6370880,19215936,865856,2471488,378432,56629312,69474368,25434176,38279232,51124288,7084096,19929152,52729920,8689728,21534784,3184704,4790336,50436160,6395968,19241024,890944,2496576,50636864,6596672,19441728,1091648,2697280,403520,604224,50350144,6309952,19155008,804928,2410560,116800,56632448,69477504,25437312,38282368,51127424,7087232,19932288,52733056,8692864,21537920,3187840,4793472,50439296,6399104,19244160,894080,2499712,50640000,6599808,19444864,1094784,2700416,406656,607360,50378368,6338176,19183232,833152,2438784,145024,345728,84096,75759808,57409728,70254784,26214592,59015360,71860416,40665280,53510336,9470144,55115968,23920832,56721600,69566656,25526464,38371520,51216576,7176384,20021440,52822208,8782016,21627072,3276992,56922304,69767360,25727168,38572224,51417280,7377088,53022912,8982720,21827776,5083328,50729152,6688960,19534016,1183936,50929856,6889664,19734720,2990272,56635584,69480640,25440448,38285504,51130560,7090368,19935424,52736192,8696000,21541056,3190976,4796608,50442432,6402240,19247296,897216,2502848,50643136,6602944,19448000,1097920,2703552,409792,56660672,69505728,25465536,38310592,51155648,7115456,19960512,52761280,8721088,21566144,3216064,4821696,50467520,6427328,19272384,922304,50668224,6628032,19473088,1123008,2728640,635584,50381504,6341312,19186368,836288,2441920,148160,50406592,6366400,19211456,861376,2467008,373952,56624832,69469888,25429696,38274752,51119808,7079616,19924672,52725440,8685248,21530304,3180224,4785856,50431680,6391488,19236544,886464,2492096,50632384,6592192,19437248,1087168,2692800,399040,599744,50345664,6305472,19150528,800448,2406080,112320,313024,50370752,6330560,19175616,825536,2431168,137408,338112,51392,56627968,69473024,25432832,38277888,51122944,7082752,19927808,52728576,8688384,21533440,3183360,4788992,50434816,6394624,19239680,889600,2495232,50635520,6595328,19440384,1090304,2695936,402176,602880,50348800,6308608,19153664,803584,2409216,115456,50373888,6333696,19178752,828672,2434304,140544,341248,79616,50338048,6297856,19142912,792832,2398464,104704,305408,18688,75760200,57410120,70255176,26214984,59015752,71860808,40665672,53510728,9470536,55116360,23921224,56721992,69567048,25526856,38371912,51216968,7176776,20021832,52822600,8782408,21627464,3277384,56922696,69767752,25727560,38572616,51417672,7377480,53023304,8983112,21828168,5083720,50729544,6689352,19534408,1184328,50930248,6890056,19735112,2990664,56635976,69481032,25440840,38285896,51130952,7090760,19935816,52736584,8696392,21541448,3191368,4797000,50442824,6402632,19247688,897608,2503240,50643528,6603336,19448392,1098312,2703944,410184,56661064,69506120,25465928,38310984,51156040,7115848,19960904,52761672,8721480,21566536,3216456,4822088,50467912,6427720,19272776,922696,50668616,6628424,19473480,1123400,2729032,635976,50381896,6341704,19186760,836680,2442312,148552,50406984,6366792,19211848,861768,2467400,374344,56625224,69470280,25430088,38275144,51120200,7080008,19925064,52725832,8685640,21530696,3180616,4786248,50432072,6391880,19236936,886856,2492488,50632776,6592584,19437640,1087560,2693192,399432,600136,50346056,6305864,19150920,800840,2406472,112712,313416,56628360,69473416,25433224,38278280,51123336,7083144,19928200,52728968,8688776,21533832,3183752,4789384,50435208,6395016,19240072,889992,2495624,50635912,6595720,19440776,1090696,2696328,402568,603272,50349192,6309000,19154056,803976,2409608,115848,50374280,6334088,19179144,829064,2434696,140936,341640,80008,50341576,6301384,19146440,796360,2401992,108232,308936,47304,56623880,69468936,25428744,38273800,51118856,7078664,19923720,52724488,8684296,21529352,3179272,4784904,50430728,6390536,19235592,885512,2491144,50631432,6591240,19436296,1086216,2691848,398088,598792,50344712,6304520,19149576,799496,2405128,111368,312072,50369800,6329608,19174664,824584,2430216,136456,337160,50440,75528,50333960,6293768,19138824,788744,2394376,100616,301320,14600,56624272,69469328,25429136,38274192,51119248,7079056,19924112,52724880,8684688,21529744,3179664,4785296,50431120,6390928,19235984,885904,2491536,50631824,6591632,19436688,1086608,2692240,398480,599184,50345104,6304912,19149968,799888,2405520,111760,312464,50370192,6330000,19175056,824976,2430608,136848,337552,50832,75920,50337488,6297296,19142352,792272,2397904,104144,304848,18128,43216,10512,75759640,57409560,70254616,26214424,59015192,71860248,40665112,53510168,9469976,55115800,23920664,56721432,69566488,25526296,38371352,51216408,7176216,20021272,52822040,8781848,21626904,3276824,56922136,69767192,25727000,38572056,51417112,7376920,53022744,8982552,21827608,5083160,50728984,6688792,19533848,1183768,50929688,6889496,19734552,2990104,56635416,69480472,25440280,38285336,51130392,7090200,19935256,52736024,8695832,21540888,3190808,4796440,50442264,6402072,19247128,897048,2502680,50642968,6602776,19447832,1097752,2703384,409624,56660504,69505560,25465368,38310424,51155480,7115288,19960344,52761112,8720920,21565976,3215896,4821528,50467352,6427160,19272216,922136,50668056,6627864,19472920,1122840,2728472,635416,50381336,6341144,19186200,836120,2441752,147992,50406424,6366232,19211288,861208,2466840,373784,56624664,69469720,25429528,38274584,51119640,7079448,19924504,52725272,8685080,21530136,3180056,4785688,50431512,6391320,19236376,886296,2491928,50632216,6592024,19437080,1087000,2692632,398872,599576,50345496,6305304,19150360,800280,2405912,112152,312856,50370584,6330392,19175448,825368,2431000,137240,337944,51224,56627800,69472856,25432664,38277720,51122776,7082584,19927640,52728408,8688216,21533272,3183192,4788824,50434648,6394456,19239512,889432,2495064,50635352,6595160,19440216,1090136,2695768,402008,602712,50348632,6308440,19153496,803416,2409048,115288,50373720,6333528,19178584,828504,2434136,140376,341080,79448,50337880,6297688,19142744,792664,2398296,104536,305240,18520,50341016,6300824,19145880,795800,2401432,107672,308376,46744,56623320,69468376,25428184,38273240,51118296,7078104,19923160,52723928,8683736,21528792,3178712,4784344,50430168,6389976,19235032,884952,2490584,50630872,6590680,19435736,1085656,2691288,397528,598232,50344152,6303960,19149016,798936,2404568,110808,311512,50369240,6329048,19174104,824024,2429656,135896,336600,49880,74968,50333400,6293208,19138264,788184,2393816,100056,300760,14040,39128,50336536,6296344,19141400,791320,2396952,103192,303896,17176,42264,6424,56623712,69468768,25428576,38273632,51118688,7078496,19923552,52724320,8684128,21529184,3179104,4784736,50430560,6390368,19235424,885344,2490976,50631264,6591072,19436128,1086048,2691680,397920,598624,50344544,6304352,19149408,799328,2404960,111200,311904,50369632,6329440,19174496,824416,2430048,136288,336992,50272,75360,50333792,6293600,19138656,788576,2394208,100448,301152,14432,50336928,6296736,19141792,791712,2397344,103584,304288,17568,42656,9952,50332448,6292256,19137312,787232,2392864,99104,299808,13088,38176,2336,75759689,57409609,70254665,26214473,59015241,71860297,40665161,53510217,9470025,55115849,23920713,56721481,69566537,25526345,38371401,51216457,7176265,20021321,52822089,8781897,21626953,3276873,56922185,69767241,25727049,38572105,51417161,7376969,53022793,8982601,21827657,5083209,50729033,6688841,19533897,1183817,50929737,6889545,19734601,2990153,56635465,69480521,25440329,38285385,51130441,7090249,19935305,52736073,8695881,21540937,3190857,4796489,50442313,6402121,19247177,897097,2502729,50643017,6602825,19447881,1097801,2703433,409673,56660553,69505609,25465417,38310473,51155529,7115337,19960393,52761161,8720969,21566025,3215945,4821577,50467401,6427209,19272265,922185,50668105,6627913,19472969,1122889,2728521,635465,50381385,6341193,19186249,836169,2441801,148041,50406473,6366281,19211337,861257,2466889,373833,56624713,69469769,25429577,38274633,51119689,7079497,19924553,52725321,8685129,21530185,3180105,4785737,50431561,6391369,19236425,886345,2491977,50632265,6592073,19437129,1087049,2692681,398921,599625,50345545,6305353,19150409,800329,2405961,112201,312905,50370633,6330441,19175497,825417,2431049,137289,337993,51273,56627849,69472905,25432713,38277769,51122825,7082633,19927689,52728457,8688265,21533321,3183241,4788873,50434697,6394505,19239561,889481,2495113,50635401,6595209,19440265,1090185,2695817,402057,602761,50348681,6308489,19153545,803465,2409097,115337,50373769,6333577,19178633,828553,2434185,140425,341129,79497,50337929,6297737,19142793,792713,2398345,104585,305289,18569,50341065,6300873,19145929,795849,2401481,107721,308425,46793,56623369,69468425,25428233,38273289,51118345,7078153,19923209,52723977,8683785,21528841,3178761,4784393,50430217,6390025,19235081,885001,2490633,50630921,6590729,19435785,1085705,2691337,397577,598281,50344201,6304009,19149065,798985,2404617,110857,311561,50369289,6329097,19174153,824073,2429705,135945,336649,49929,75017,50333449,6293257,19138313,788233,2393865,100105,300809,14089,39177,56623761,69468817,25428625,38273681,51118737,7078545,19923601,52724369,8684177,21529233,3179153,4784785,50430609,6390417,19235473,885393,2491025,50631313,6591121,19436177,1086097,2691729,397969,598673,50344593,6304401,19149457,799377,2405009,111249,311953,50369681,6329489,19174545,824465,2430097,136337,337041,50321,75409,50333841,6293649,19138705,788625,2394257,100497,301201,14481,50336977,6296785,19141841,791761,2397393,103633,304337,17617,42705,10001,50332889,6292697,19137753,787673,2393305,99545,300249,13529,38617,5913,56623201,69468257,25428065,38273121,51118177,7077985,19923041,52723809,8683617,21528673,3178593,4784225,50430049,6389857,19234913,884833,2490465,50630753,6590561,19435617,1085537,2691169,397409,598113,50344033,6303841,19148897,798817,2404449,110689,311393,50369121,6328929,19173985,823905,2429537,135777,336481,49761,74849,50333281,6293089,19138145,788065,2393697,99937,300641,13921,39009,50336417,6296225,19141281,791201,2396833,103073,303777,17057,42145,6305,9441,50331937,6291745,19136801,786721,2392353,98593,299297,12577,37665,1825,56623250,69468306,25428114,38273170,51118226,7078034,19923090,52723858,8683666,21528722,3178642,4784274,50430098,6389906,19234962,884882,2490514,50630802,6590610,19435666,1085586,2691218,397458,598162,50344082,6303890,19148946,798866,2404498,110738,311442,50369170,6328978,19174034,823954,2429586,135826,336530,49810,74898,50333330,6293138,19138194,788114,2393746,99986,300690,13970,39058,50336466,6296274,19141330,791250,2396882,103122,303826,17106,42194,6354,9490,50332378,6292186,19137242,787162,2392794,99034,299738,13018,38106,2266,5402,1314,75759619,57409539,70254595,26214403,59015171,71860227,40665091,53510147,9469955,55115779,23920643,56721411,69566467,25526275,38371331,51216387,7176195,20021251,52822019,8781827,21626883,3276803,56922115,69767171,25726979,38572035,51417091,7376899,53022723,8982531,21827587,5083139,50728963,6688771,19533827,1183747,50929667,6889475,19734531,2990083,56635395,69480451,25440259,38285315,51130371,7090179,19935235,52736003,8695811,21540867,3190787,4796419,50442243,6402051,19247107,897027,2502659,50642947,6602755,19447811,1097731,2703363,409603,56660483,69505539,25465347,38310403,51155459,7115267,19960323,52761091,8720899,21565955,3215875,4821507,50467331,6427139,19272195,922115,50668035,6627843,19472899,1122819,2728451,635395,50381315,6341123,19186179,836099,2441731,147971,50406403,6366211,19211267,861187,2466819,373763,56624643,69469699,25429507,38274563,51119619,7079427,19924483,52725251,8685059,21530115,3180035,4785667,50431491,6391299,19236355,886275,2491907,50632195,6592003,19437059,1086979,2692611,398851,599555,50345475,6305283,19150339,800259,2405891,112131,312835,50370563,6330371,19175427,825347,2430979,137219,337923,51203,56627779,69472835,25432643,38277699,51122755,7082563,19927619,52728387,8688195,21533251,3183171,4788803,50434627,6394435,19239491,889411,2495043,50635331,6595139,19440195,1090115,2695747,401987,602691,50348611,6308419,19153475,803395,2409027,115267,50373699,6333507,19178563,828483,2434115,140355,341059,79427,50337859,6297667,19142723,792643,2398275,104515,305219,18499,50340995,6300803,19145859,795779,2401411,107651,308355,46723,56623299,69468355,25428163,38273219,51118275,7078083,19923139,52723907,8683715,21528771,3178691,4784323,50430147,6389955,19235011,884931,2490563,50630851,6590659,19435715,1085635,2691267,397507,598211,50344131,6303939,19148995,798915,2404547,110787,311491,50369219,6329027,19174083,824003,2429635,135875,336579,49859,74947,50333379,6293187,19138243,788163,2393795,100035,300739,14019,39107,50336515,6296323,19141379,791299,2396931,103171,303875,17155,42243,6403,56623691,69468747,25428555,38273611,51118667,7078475,19923531,52724299,8684107,21529163,3179083,4784715,50430539,6390347,19235403,885323,2490955,50631243,6591051,19436107,1086027,2691659,397899,598603,50344523,6304331,19149387,799307,2404939,111179,311883,50369611,6329419,19174475,824395,2430027,136267,336971,50251,75339,50333771,6293579,19138635,788555,2394187,100427,301131,14411,50336907,6296715,19141771,791691,2397323,103563,304267,17547,42635,9931,50332427,6292235,19137291,787211,2392843,99083,299787,13067,38155,2315,50332819,6292627,19137683,787603,2393235,99475,300179,13459,38547,5843,56623131,69468187,25427995,38273051,51118107,7077915,19922971,52723739,8683547,21528603,3178523,4784155,50429979,6389787,19234843,884763,2490395,50630683,6590491,19435547,1085467,2691099,397339,598043,50343963,6303771,19148827,798747,2404379,110619,311323,50369051,6328859,19173915,823835,2429467,135707,336411,49691,74779,50333211,6293019,19138075,787995,2393627,99867,300571,13851,38939,50336347,6296155,19141211,791131,2396763,103003,303707,16987,42075,6235,9371,50331867,6291675,19136731,786651,2392283,98523,299227,12507,37595,1755,4891,50332259,6292067,19137123,787043,2392675,98915,299619,12899,37987,2147,5283,803,56623180,69468236,25428044,38273100,51118156,7077964,19923020,52723788,8683596,21528652,3178572,4784204,50430028,6389836,19234892,884812,2490444,50630732,6590540,19435596,1085516,2691148,397388,598092,50344012,6303820,19148876,798796,2404428,110668,311372,50369100,6328908,19173964,823884,2429516,135756,336460,49740,74828,50333260,6293068,19138124,788044,2393676,99916,300620,13900,38988,50336396,6296204,19141260,791180,2396812,103052,303756,17036,42124,6284,9420,50331916,6291724,19136780,786700,2392332,98572,299276,12556,37644,1804,50332308,6292116,19137172,787092,2392724,98964,299668,12948,38036,2196,5332,1244,50331748,6291556,19136612,786532,2392164,98404,299108,12388,37476,1636,4772,29};


int reverse(int x)
{
    int y=0;
    for(int i=0;i<9;i++) y|=(x&7<<3*(8-i))>>3*(8-i)<<3*i;
    return y;
}

unordered_map<int,int> f;
int sum=0;
void f_init(int h,int n,int x)//+a -b
{
    if(h==9)
    {
        if(x>reverse(x)) return;
        f[x]=sum++;
        return;
    }
    for(int i=0;i<=min(4,n);i++) f_init(h+1,n-i,x|i<<3*h);
}

static unordered_map<string,tile> str_tile =
{
    {"W1",0x11},{"W2",0x12},{"W3",0x13},{"W4",0x14},{"W5",0x15},{"W6",0x16},{"W7",0x17},{"W8",0x18},{"W9",0x19},
    {"T1",0x21},{"T2",0x22},{"T3",0x23},{"T4",0x24},{"T5",0x25},{"T6",0x26},{"T7",0x27},{"T8",0x28},{"T9",0x29},
    {"B1",0x31},{"B2",0x32},{"B3",0x33},{"B4",0x34},{"B5",0x35},{"B6",0x36},{"B7",0x37},{"B8",0x38},{"B9",0x39},
    {"F1",0x41},{"F2",0x42},{"F3",0x43},{"F4",0x44},{"J1",0x45},{"J2",0x46},{"J3",0x47},{"K0",0x00}
};

static unordered_map<string,tile> str__tile =
{
    {"C1",0x11},{"C2",0x12},{"C3",0x13},{"C4",0x14},{"C5",0x15},{"C6",0x16},{"C7",0x17},{"C8",0x18},{"C9",0x19},
    {"B1",0x21},{"B2",0x22},{"B3",0x23},{"B4",0x24},{"B5",0x25},{"B6",0x26},{"B7",0x27},{"B8",0x28},{"B9",0x29},
    {"D1",0x31},{"D2",0x32},{"D3",0x33},{"D4",0x34},{"D5",0x35},{"D6",0x36},{"D7",0x37},{"D8",0x38},{"D9",0x39},
};

static unordered_map<tile,string> tile_str =
{
    {0x11,"W1"},{0x12,"W2"},{0x13,"W3"},{0x14,"W4"},{0x15,"W5"},{0x16,"W6"},{0x17,"W7"},{0x18,"W8"},{0x19,"W9"},
    {0x21,"T1"},{0x22,"T2"},{0x23,"T3"},{0x24,"T4"},{0x25,"T5"},{0x26,"T6"},{0x27,"T7"},{0x28,"T8"},{0x29,"T9"},
    {0x31,"B1"},{0x32,"B2"},{0x33,"B3"},{0x34,"B4"},{0x35,"B5"},{0x36,"B6"},{0x37,"B7"},{0x38,"B8"},{0x39,"B9"},
    {0x41,"F1"},{0x42,"F2"},{0x43,"F3"},{0x44,"F4"},{0x45,"J1"},{0x46,"J2"},{0x47,"J3"},{0x00,"K0"}
};

static unordered_map<tile,string> tile__str =
{
    {0x11,"C1"},{0x12,"C2"},{0x13,"C3"},{0x14,"C4"},{0x15,"C5"},{0x16,"C6"},{0x17,"C7"},{0x18,"C8"},{0x19,"C9"},
    {0x21,"B1"},{0x22,"B2"},{0x23,"B3"},{0x24,"B4"},{0x25,"B5"},{0x26,"B6"},{0x27,"B7"},{0x28,"B8"},{0x29,"B9"},
    {0x31,"D1"},{0x32,"D2"},{0x33,"D3"},{0x34,"D4"},{0x35,"D5"},{0x36,"D6"},{0x37,"D7"},{0x38,"D8"},{0x39,"D9"},
};

int Num(int x)//计算数牌的牌数
{
    int k=0;
    while(x) {k+=x&7;x>>=3;}
    return k;
}
inline bool check(int n)
{
    return n%3==0&&n>=0&&n<=12;
}
inline int getNum(int x,int i)
{
    return (x&7<<3*i)>>3*i;
}
//以上为init内容

int I, quan, act_type, player,turnID;
int hu,fan,clock0,timeout,Listen;
tile last_tile;

multiset<tile> hand;
vector<pair<string, pair<string, int> > > pack;

ostringstream sout;

double pa[84]={0,5.65551e-06,7.54072e-06,3.01631e-05,4.52461e-05,0.000101808,0.000148957,0.000235726,0.000328208,0.000498135,0.000689052,0.000999343,0.00123861,0.00167372,0.00211463,0.00262465,0.00345285,0.00429851,0.00503914,0.00576723,0.00690724,0.00809299,0.00946564,0.0103917,0.0119464,0.0133199,0.0147886,0.0168527,0.0184147,0.0201029,0.0217991,0.0239527,0.0251757,0.0270436,0.0290346,0.0308167,0.0322615,0.034714,0.0371886,0.0387897,0.0411753,0.0428244,0.0450972,0.0466545,0.0484666,0.0510108,0.0526775,0.0536771,0.0552068,0.0576616,0.0600123,0.0616885,0.0632153,0.0642864,0.0666895,0.068661,0.0696094,0.0707633,0.0731634,0.0725822,0.0755151,0.0771118,0.0789058,0.077592,0.0816104,0.0808633,0.0832748,0.0838217,0.0841806,0.0825355,0.0857262,0.0876904,0.0875198,0.0841491,0.0877647,0.0904592,0.0887342,0.0918869,0.0874063,0.0849182,0.0885145,0.0836456,0.0815082,0.0835346};
/*
dui--:
不是补花的摸牌，包括
1.自己摸牌
2.别人的DRAW//杠完会draw 补花不draw
*/
static int unknown[100],paichi[100],ku,dui,last,gang,l[4]={21,21,21,21};//牌堆不考虑花牌
int ooo;
double vote[100];//所有上听数最小的胡牌牌型来投票
int wan,tiao,bing,wanr,tiaor,bingr;

multiset<tile> hand0;
tile jiang,mo;//mo 这回合摸的 用于补花
int ting;//oo是否找到有限上听数 ting 上听数+1

void wantiaobing(multiset<tile>& hand)
{
    wan=0;tiao=0;bing=0;
    wanr=0;tiaor=0;bingr=0;
    for(int i:hand)
        if(i>>4==1) wan+=1<<((i&0x0F)-1)*3;
        else if(i>>4==2) tiao+=1<<((i&0x0F)-1)*3;
        else if(i>>4==3) bing+=1<<((i&0x0F)-1)*3;
    if(wan>reverse(wan)) {wan=reverse(wan);wanr=1;}
    if(tiao>reverse(tiao)) {tiao=reverse(tiao);tiaor=1;}
    if(bing>reverse(bing)) {bing=reverse(bing);bingr=1;}
}
bool canPENG(tile t) {return hand.count(t) >= 2;}
bool canGANG(tile t) {return hand.count(t) == 3;}
bool canANGANG(tile t) {return hand.count(t) == 4;}
bool canBUGANG(tile t)
{
    for(auto i:pack) if(i.first=="PENG"&&i.second.first==tile_str[t]) return 1;
    return 0;
}
bool canCHI(tile t,int k)
{
    if (t >> 4 == 4) return 0;
    switch (k)
    {
        case -1:return hand.find(t - 2) != hand.end() && hand.find(t - 1) != hand.end();
        case 0:return hand.find(t - 1) != hand.end() && hand.find(t + 1) != hand.end();
        case 1:return hand.find(t + 1) != hand.end() && hand.find(t + 2) != hand.end();
    }
    return 0;
}
bool canHU(multiset<tile>& hand)
{
    for(auto it=hand.begin();it!=hand.end();it++) if(hand.count(*it)>=2)
    {
        jiang=*it;
        auto hand_=hand;
        hand_.erase(hand_.find(jiang));
        hand_.erase(hand_.find(jiang));
        wantiaobing(hand_);
        if(check(Num(wan))&&check(Num(tiao))&&check(Num(bing))&&num[f[wan]][0][0]&&num[f[tiao]][0][0]&&num[f[bing]][0][0]) return 1;
        it=hand.upper_bound(*it);
        it--;
    }
    return 0;
}
long long N=0;
const int ddl=990000;

void feng(multiset<tile>& hand,vector<tile>& box,int a,int b,int tin)//加了a删了b
{
    if(max(a,b)<=tin)//增删在上听数范围内
    {
        for(int a1=0;a1<=min(5,tin-a);a1++)
            for(int b1=0;b1<=min(4,tin-b);b1++)
                for(int a2=0;a2<=min(5,tin-a-a1);a2++)
                    for(int b2=0;b2<=min(4,tin-b-b1);b2++)
                    {
                        int a3=tin-a-a1-a2,b3=tin-b-b1-b2;
                        if(a3>4||b3>4) continue;
                        if(!check(Num(wan)+a1-b1)||!check(Num(tiao)+a2-b2)||!check(Num(bing)+a3-b3)) continue;
                        for(int i=0;i<num[f[wan]][a1][b1];i++)//开始查表并组合
                            for(int j=0;j<num[f[tiao]][a2][b2];j++)
                                for(int k=0;k<num[f[bing]][a3][b3];k++)
                                {
                                    if(timeout) return;
                                    if(clock()-clock0>ddl) {timeout=1;return;}
                                    vector<string> tmphand;
                                    for (auto o : box) tmphand.push_back(tile_str[o]);
                                    for(int o=0;o<9;o++) for(int p=0;p<getNum(getx[biao[add[f[wan]][a1][b1]+i]],wanr?8-o:o);p++)
                                        tmphand.push_back("W"+to_string(o+1));
                                    for(int o=0;o<9;o++) for(int p=0;p<getNum(getx[biao[add[f[tiao]][a2][b2]+j]],tiaor?8-o:o);p++)
                                        tmphand.push_back("T"+to_string(o+1));
                                    for(int o=0;o<9;o++) for(int p=0;p<getNum(getx[biao[add[f[bing]][a3][b3]+k]],bingr?8-o:o);p++)
                                        tmphand.push_back("B"+to_string(o+1));
                                    
                                    multiset<tile> handt,more,less;//handt:最终手牌 more:多余的 less:少的
                                    for(auto i:tmphand) handt.insert(str_tile[i]);//最终手牌
                                    
                                    int o4=0;
                                    for(tile o:handt) if(handt.count(o)+paichi[o]>4) o4=1;//保证手牌无超4，已考虑pack
                                    if(o4) continue;
                                    
                                    less=handt;
                                    for(tile o:hand0)
                                    {
                                        auto it=less.find(o);
                                        if(it!=less.end()) less.erase(it); else more.insert(o);
                                    }
                                    
                                    int oo=0;//有没有能听的
                                    double tmp=1;//和牌牌型权重
                                    for(auto i:less) tmp*=unknown[i]--;
                                    for(auto i:less) unknown[i]++;
                                    //if(!tmp) continue;//有的牌出现4张了
                                    set<tile> buxing;//哪些牌不能听
                                    
                                    int pai[100],hf[5][3]={jiang,jiang},hfn=1;
                                    for(int j=1;j<=4;j++) for(tile i=0x10*j+1;i<=0x10*j+9;i++) pai[i]=0;
                                    for(tile i:handt) pai[i]++;
                                    //将
                                    pai[jiang]-=2;
                                    //数牌
                                    for(int j=1;j<=3;j++) for(tile i=0x10*j+1;i<=0x10*j+9;i++)
                                    {
                                        if(pai[i]>=3)
                                        {
                                            for(int k=0;k<3;k++) hf[hfn][k]=i;
                                            pai[i]-=3;
                                            hfn++;
                                        }
                                        while(pai[i])
                                        {
                                            for(int k=0;k<3;k++) {hf[hfn][k]=i+k;pai[i+k]--;}
                                            hfn++;
                                        }
                                    }
                                    
                                    int ll[5][3],nn[5]={0,0,0,0,0};//ll为划分中少的，nn为ll中个数
                                    for(int k=1;k<=4;k++)for(auto i:less)if(handt.count(i)==k)//最终手牌中的单张先删
                                    {
                                        int m0=10,j0=0;
                                        for(int j=0;j<hfn;j++)
                                            if((hf[j][0]==i||hf[j][1]==i||hf[j][2]==i)&&nn[j]<=m0)
                                            {
                                                m0=nn[j];//找已缺牌数最少的面子
                                                j0=j;
                                            }
                                        ll[j0][nn[j0]++]=i;
                                    }
                                    int pn=0;
                                    for(int i=0;i<hfn;i++) if(nn[i]) pn++;//还有差几个面子，同上听数下越多越好
                                    tmp*=pn;
                                    
                                    for(auto les:less)
                                    {
                                        oo=1;
                                        for(tile t:more) vote[t]+=tmp;
                                    }
                                    if(oo) ooo++;
                                }
                        
                    }
    }
}

int Vote()//返回上听数 //求出所有上听数最小的胡牌牌型并投票
{
    sout<<"V ";
    sout<<clock()-clock0<<' ';
    ooo=0;
    int kong=int(hand.count(0));
    hand.erase(0);
    hand0=hand;
    int tin=0;//超时就吃碰
    for(tin=1;tin<=8;tin++)//上听数从0-7 需替换1-8张胡
    {
        //拿2张做将牌再算
        sout<<tin<<' ';
        for(auto it=hand.begin();it!=hand.end();it++) if(hand.count(*it)>=2)
        {
            jiang=*it;
            auto hand_=hand;
            vector<tile> box;//box只有将和风的刻子 明牌在pack里
            hand_.erase(hand_.find(jiang));
            hand_.erase(hand_.find(jiang));
            box.push_back(jiang);
            box.push_back(jiang);
            //这之后数牌不变了
            wantiaobing(hand_);
            feng(hand_,box,0,kong,tin);
            it=hand.upper_bound(*it);
            it--;
        }
        //拿1张做将牌再算
        for(tile i : hand) if(hand.count(i)==1)
        {
            //cout<<1;
            jiang=i;
            auto hand_=hand;
            vector<tile> box;
            hand_.erase(jiang);
            box.push_back(jiang);
            box.push_back(jiang);
            //这之后数牌不变了
            wantiaobing(hand_);
            feng(hand_,box,1,kong,tin);
        }
        if(ooo)
        {
#ifndef _BOTZONE_ONLINE
            //cout<<"还差"<<tin<<"张能胡,有"<<ooo<<"种胡法"<<endl;
            cout<<"haicha "<<tin<<" nenghu,you "<<ooo<<" zhonghufa"<<endl;
#endif
            break;
        }
    }
    //先不考虑7对
    return tin;
}

// 决策出牌
tile choose_play()
{
    for(int i=0;i<100;i++) vote[i]=0;
    ting=Vote();
    int k=0;
    double m=0;
    for(int i=0;i<100;i++) if(vote[i]>m) {m=vote[i];k=i;}
    //for(int i=0;i<100;i++) cout<<tile_str[i]<<' '<<vote[i]<<endl;
    return k;
}

void Response()
{
    string Tile=tile__str[last_tile];
    if (hand.size()%3==2)//决策 刚摸了一张牌
    {
        if(canHU(hand))//考虑是不是自摸了
        {
            action_type="Win";
            return;
        }
        for(tile t:hand) if(canBUGANG(t)||canANGANG(t)&&!Listen)//如果 可以补杠 或者 没听的情况下可以暗杠
        {
            action_type="Kon";
            action_content=tile__str[t]+tile__str[t]+tile__str[t]+tile__str[t];
            return;
        }
        for(tile t:hand) if(canANGANG(t)&&Listen)//如果能暗杠且听了，看改不改变下叫
        {
            hand.erase(t);//不用恢复，不会走到chooseplay
            paichi[t]=4;
            ting=Vote();//pack要维护吗？
            if(ting==1)
            {
                action_type="Kon";
                action_content=tile__str[t]+tile__str[t]+tile__str[t]+tile__str[t];
                return;
            }
        }
        if(Listen)
        {
            action_type="Discard";
            action_content=Tile;
            return;
        }
        string Play=tile__str[choose_play()];//决策打哪张牌
        if(ting==1&&!Listen) action_type="Listen";
        else action_type="Discard";
        action_content=Play;
        return;
    }
    //决策 不是摸牌 别人动作
    auto hand_=hand;
    hand_.insert(last_tile);
    if(canHU(hand_))//先看看能不能和
    {
        action_type="Win";
        return;
    }
    //别人出了牌，看要不要吃碰杠

    
    if(canGANG(last_tile)) //如果能杠直接杠
    {
        action_type="Kon";
        action_content=Tile+Tile+Tile+Tile;
        return;
    }

    map<pair<int,double>,pair<string,string>> Map;//按上听数从小到大，投票从大到小排序

    //如果不吃碰
    double m=0;
    hand.insert(0);
    for(int i=0;i<100;i++) vote[i]=0;
    ting=Vote();
    for(int i=0;i<100;i++) m=max(vote[i],m);
    hand.erase(0);
    Map[{ting,-m}]={"Pass",""};
    
    //如果吃碰
    if (player == (I + 1) % 4 && (canCHI(last_tile,-1)||canCHI(last_tile,0)||canCHI(last_tile,1)))//如果吃
    {
        for(int k=-1;k<=1;k++) if(canCHI(last_tile,k))
        {
            tile mid=last_tile+k;//中间牌是t+k
            for(int i=-1;i<=1;++i) if(k+i!=0) {hand.erase(hand.find(mid+i));paichi[mid+i]++;}
            pack.push_back({"CHI", {tile_str[mid],0}});//暂不维护后面那个数
            for(int i=0;i<100;i++) vote[i]=0;
            ting=Vote();
            m=0; for(int i=0;i<100;i++) m=max(vote[i],m);
            Map[{ting,-m}]={"Chow",tile__str[mid-1]+tile__str[mid]+tile__str[mid+1]};//吃的话就1番，还少一次摸牌机会，就不给优惠了
            for(int i=-1;i<=1;++i) if(k+i!=0) {hand.insert(mid+i);paichi[mid+i]--;}
            pack.pop_back();
        }
    }
    
    if(canPENG(last_tile))//如果碰
    {
        hand.erase(hand.find(last_tile));
        hand.erase(hand.find(last_tile));
        paichi[last_tile]+=2;
        pack.push_back({"PENG",{tile_str[last_tile],0}});//暂不维护后面那个数
        for(int i=0;i<100;i++) vote[i]=0;
        ting=Vote();
        Map[{ting,-1e8}]={"Pon",Tile+Tile+Tile};//碰2番，同上听数碰优先
    }
    
    cout<<Map.size()<<'m'<<endl;
    action_type=Map.begin()->second.first;
    action_content=Map.begin()->second.second;
}

int main()
{
    clock0=int(clock());

    //初始化
    ku=136;dui=84;hu=0;fan=0;timeout=0;ooo=0;last=0;gang=0;Listen=0;
    for(int i=0;i<4;i++) l[i]=21;
    for(int i=0;i<100;i++) paichi[i]=0;
    hand.clear();
    pack.clear();

    MahjongInit();
    //cout<<"1 "<<(clock()-clock0)/1000000.0<<endl;
    f_init(0,14,0);
    //cout<<"2 "<<(clock()-clock0)/1000000.0<<endl;
    
    ifstream in0("C:\\Users\\1\\Desktop\\ai-demo\\src\\data\\mahjong_num.dat", ios::binary | ios::in);
    //ifstream in0("data/mahjong_num.dat", ios::binary | ios::in);
    in0.read((char*)num, sizeof(num));
    in0.close();
    ifstream in1("C:\\Users\\1\\Desktop\\ai-demo\\src\\data\\mahjong_add.dat", ios::binary | ios::in);
    //ifstream in1("data/mahjong_add.dat", ios::binary | ios::in);
    in1.read((char*)add, sizeof(add));
    in1.close();
    ifstream in2("C:\\Users\\1\\Desktop\\ai-demo\\src\\data\\mahjong_biao.dat", ios::binary | ios::in);
    //ifstream in2("data/mahjong_biao.dat", ios::binary | ios::in);
    in2.read((char*)biao, sizeof(biao));
    in2.close();
    
    cout<<biao[1]<<'$'<<endl;

    sout<<clock()-clock0<<' ';
    
    //输入
    //FILE *fp=
    freopen("C:\\Users\\1\\Desktop\\ai-demo\\src\\in.txt","r",stdin);
    cin >> inputJSON;
    //fclose(fp);

    cout << inputJSON;
    I=inputJSON["seat"].asInt();
    quan=inputJSON["dealer"].asInt();
    string Hand=inputJSON["hand"].asString();
    string Chow_hand=inputJSON["chow_hand"].asString();
    string Pon_hand=inputJSON["pon_hand"].asString();
    string Kon_hand=inputJSON["kon_hand"].asString();
    vector<string> history,chow_hand,pon_hand,kon_hand;
    for(int i=0;i<inputJSON["history"].size();i++) history.push_back(inputJSON["history"][i].asString());
    boost::split(chow_hand,Chow_hand,boost::is_any_of(","));
    boost::split(pon_hand,Pon_hand,boost::is_any_of(","));
    boost::split(kon_hand,Kon_hand,boost::is_any_of(","));
    for(int i=0;i<Hand.size();i+=2) hand.insert(str__tile[Hand.substr(i,2)]);
    for(auto i:chow_hand) if(i.size()>0) pack.push_back({"CHI", {tile_str[str__tile[i.substr(2,2)]],0}});
    for(auto i:pon_hand) if(i.size()>0) pack.push_back({"PENG", {tile_str[str__tile[i.substr(0,2)]],0}});
    for(auto i:kon_hand) if(i.size()>0) pack.push_back({"GANG", {tile_str[str__tile[i.substr(0,2)]],0}});//先不管牌从哪来的
    for(string s:history) if(s.size()>0)
    {
        vector<string> ss;
        boost::split(ss,s,boost::is_any_of(","));
        tile t=str__tile[ss[2].substr(0,2)];
        player=ss[0][0]-'0';//记录最后一个出牌的人
        if(ss[1]=="Discard") {paichi[t]++;last_tile=t;}//记录最后出的一张牌
        if(ss[1]=="Chow") for(int i=t-1;i<=t+1;i++) if(i!=last_tile) paichi[i]++;
        if(ss[1]=="Pon") paichi[t]+=2;
        if(ss[1]=="Kon") paichi[t]+=3;
        if(ss[1]=="Listen"&&ss[0][0]-'0'==I) Listen=1;
    }
    for(int i=0;i<100;i++) unknown[i]=4-paichi[i]-hand.count(i);

    Response();//决策
    
    string debug=sout.str();

    outputJSON["code"]=200;
    outputJSON["action_type"]=action_type;
    outputJSON["action_content"]=action_content;

    cout<<(clock()-clock0)/1000000.0<<endl;
    cout << outputJSON << endl;

    freopen("C:\\Users\\1\\Desktop\\ai-demo\\src\\out.txt","w",stdout);
    //cout<<biao[1]<<'$'<<endl;
    cout << outputJSON << endl;
    //fclose(fp);
}